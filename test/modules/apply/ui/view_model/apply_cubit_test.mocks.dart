// Mocks generated by Mockito 5.4.6 from annotations
// in flower_tracking_app/test/modules/apply/ui/view_model/apply_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i12;

import 'package:flower_tracking_app/core/apis/api_result/api_result.dart'
    as _i5;
import 'package:flower_tracking_app/modules/apply/data/datasource_contract/apply_datasource.dart'
    as _i11;
import 'package:flower_tracking_app/modules/apply/data/models/apply_response.dart'
    as _i7;
import 'package:flower_tracking_app/modules/apply/domain/entities/apply_response_entity.dart'
    as _i6;
import 'package:flower_tracking_app/modules/apply/domain/entities/vehicle_response_entity.dart'
    as _i10;
import 'package:flower_tracking_app/modules/apply/domain/repo_contract/apply_repo_contract.dart'
    as _i2;
import 'package:flower_tracking_app/modules/apply/domain/usecases/apply_use_case.dart'
    as _i3;
import 'package:flower_tracking_app/modules/apply/domain/usecases/get_vehicles_use_case.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApplyRepo_0 extends _i1.SmartFake implements _i2.ApplyRepo {
  _FakeApplyRepo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApplyDriverUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplyDriverUseCase extends _i1.Mock
    implements _i3.ApplyDriverUseCase {
  MockApplyDriverUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApplyRepo get applyRepo =>
      (super.noSuchMethod(
            Invocation.getter(#applyRepo),
            returnValue: _FakeApplyRepo_0(this, Invocation.getter(#applyRepo)),
          )
          as _i2.ApplyRepo);

  @override
  _i4.Future<_i5.ApiResult<_i6.ApplyResponseEntity>> execute(
    _i7.DriverRequestModel? model,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [model]),
            returnValue:
                _i4.Future<_i5.ApiResult<_i6.ApplyResponseEntity>>.value(
                  _i8.dummyValue<_i5.ApiResult<_i6.ApplyResponseEntity>>(
                    this,
                    Invocation.method(#execute, [model]),
                  ),
                ),
          )
          as _i4.Future<_i5.ApiResult<_i6.ApplyResponseEntity>>);
}

/// A class which mocks [GetVehiclesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetVehiclesUseCase extends _i1.Mock
    implements _i9.GetVehiclesUseCase {
  MockGetVehiclesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApplyRepo get applyRepo =>
      (super.noSuchMethod(
            Invocation.getter(#applyRepo),
            returnValue: _FakeApplyRepo_0(this, Invocation.getter(#applyRepo)),
          )
          as _i2.ApplyRepo);

  @override
  _i4.Future<_i5.ApiResult<_i10.VehicleResponseEntity>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue:
                _i4.Future<_i5.ApiResult<_i10.VehicleResponseEntity>>.value(
                  _i8.dummyValue<_i5.ApiResult<_i10.VehicleResponseEntity>>(
                    this,
                    Invocation.method(#execute, []),
                  ),
                ),
          )
          as _i4.Future<_i5.ApiResult<_i10.VehicleResponseEntity>>);
}

/// A class which mocks [CountryLoaderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCountryLoaderService extends _i1.Mock
    implements _i11.CountryLoaderService {
  MockCountryLoaderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> loadCountryJson() =>
      (super.noSuchMethod(
            Invocation.method(#loadCountryJson, []),
            returnValue: _i4.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#loadCountryJson, []),
              ),
            ),
          )
          as _i4.Future<String>);
}

/// A class which mocks [ImagePickerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePickerService extends _i1.Mock
    implements _i11.ImagePickerService {
  MockImagePickerService() {
    _i1.throwOnMissingStub(this);
  }

  _i4.Future<_i12.File?> pickImageFromGallery() =>
      (super.noSuchMethod(
            Invocation.method(#pickImageFromGallery, []),
            returnValue: _i4.Future<_i12.File?>.value(),
          )
          as _i4.Future<_i12.File?>);
}
