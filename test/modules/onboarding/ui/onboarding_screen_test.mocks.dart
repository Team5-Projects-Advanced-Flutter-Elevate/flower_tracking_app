// Mocks generated by Mockito 5.4.6 from annotations
// in flower_tracking_app/test/modules/onboarding/ui/onboarding_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:flower_tracking_app/shared_layers/localization/l10n_manager/localization_manager.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocalizationManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationManager extends _i1.Mock
    implements _i2.LocalizationManager {
  MockLocalizationManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get currentLocale =>
      (super.noSuchMethod(
            Invocation.getter(#currentLocale),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#currentLocale),
            ),
          )
          as String);

  @override
  bool get isEnglish =>
      (super.noSuchMethod(Invocation.getter(#isEnglish), returnValue: false)
          as bool);

  @override
  set currentLocale(String? _currentLocale) => super.noSuchMethod(
    Invocation.setter(#currentLocale, _currentLocale),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> changeLocal(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#changeLocal, [languageCode]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String?> getSavedLocal() =>
      (super.noSuchMethod(
            Invocation.method(#getSavedLocal, []),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
